"use strict";(self.webpackChunkcs_notes=self.webpackChunkcs_notes||[]).push([[955],{3905:(e,n,t)=>{t.d(n,{Zo:()=>o,kt:()=>k});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},o=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,o=p(e,["components","mdxType","originalType","parentName"]),m=c(t),d=r,k=m["".concat(s,".").concat(d)]||m[d]||u[d]||l;return t?a.createElement(k,i(i({ref:n},o),{},{components:t})):a.createElement(k,i({ref:n},o))}));function k(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,i=new Array(l);i[0]=d;var p={};for(var s in n)hasOwnProperty.call(n,s)&&(p[s]=n[s]);p.originalType=e,p[m]="string"==typeof e?e:r,i[1]=p;for(var c=2;c<l;c++)i[c]=t[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},76525:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>p,toc:()=>c});var a=t(87462),r=(t(67294),t(3905));const l={},i="Lab2: System calls \u6df1\u5165\u89e3\u6790",p={unversionedId:"system/MIT6S081/Lab2-System_calls",id:"system/MIT6S081/Lab2-System_calls",title:"Lab2: System calls \u6df1\u5165\u89e3\u6790",description:"\u5b9e\u9a8c\u6982\u89c8",source:"@site/docs/system/MIT6S081/Lab2-System_calls.md",sourceDirName:"system/MIT6S081",slug:"/system/MIT6S081/Lab2-System_calls",permalink:"/system/MIT6S081/Lab2-System_calls",draft:!1,editUrl:"https://github.com/kcxain/CS-Notes/tree/master/docs/system/MIT6S081/Lab2-System_calls.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Lab1: Unix_utilities \u6df1\u5165\u89e3\u6790",permalink:"/system/MIT6S081/Lab1-Unix_utilities"},next:{title:"Lab3: Page tables \u6df1\u5165\u89e3\u6790",permalink:"/system/MIT6S081/Lab3-Page_tables"}},s={},c=[{value:"\u5b9e\u9a8c\u6982\u89c8",id:"\u5b9e\u9a8c\u6982\u89c8",level:2},{value:"System call tracing",id:"system-call-tracing",level:2},{value:"\u8fdb\u7a0b\u72b6\u6001\u4fee\u6539",id:"\u8fdb\u7a0b\u72b6\u6001\u4fee\u6539",level:6},{value:"\u5185\u6838\u6001<code>trace</code>\u7f16\u5199",id:"\u5185\u6838\u6001trace\u7f16\u5199",level:6},{value:"\u5b50\u8fdb\u7a0b\u7ee7\u627f<code>mask</code>",id:"\u5b50\u8fdb\u7a0b\u7ee7\u627fmask",level:6},{value:"<code>trace</code>\u8f93\u51fa",id:"trace\u8f93\u51fa",level:6},{value:"Sysinfo",id:"sysinfo",level:2},{value:"\u7a7a\u95f2\u5185\u5b58\u9875",id:"\u7a7a\u95f2\u5185\u5b58\u9875",level:6},{value:"\u8fdb\u7a0b\u72b6\u6001",id:"\u8fdb\u7a0b\u72b6\u6001",level:6},{value:"\u8bbe\u7f6e<code>sysinfo</code>",id:"\u8bbe\u7f6esysinfo",level:6},{value:"\u6d4b\u8bd5",id:"\u6d4b\u8bd5",level:2},{value:"\u7cfb\u7edf\u8c03\u7528\u8fc7\u7a0b",id:"\u7cfb\u7edf\u8c03\u7528\u8fc7\u7a0b",level:2},{value:"<code>ecall</code>\u8df3\u8f6c",id:"ecall\u8df3\u8f6c",level:6},{value:"<code>uservec</code>\u4fdd\u5b58\u7528\u6237\u5bc4\u5b58\u5668",id:"uservec\u4fdd\u5b58\u7528\u6237\u5bc4\u5b58\u5668",level:6},{value:"\u9677\u9631\u5904\u7406",id:"\u9677\u9631\u5904\u7406",level:6},{value:"<code>userret</code>\u6062\u590d\u7528\u6237\u5bc4\u5b58\u5668",id:"userret\u6062\u590d\u7528\u6237\u5bc4\u5b58\u5668",level:6},{value:"\u6d41\u7a0b\u56fe",id:"\u6d41\u7a0b\u56fe",level:6},{value:"\u603b\u7ed3",id:"\u603b\u7ed3",level:2}],o={toc:c},m="wrapper";function u(e){let{components:n,...l}=e;return(0,r.kt)(m,(0,a.Z)({},o,l,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"lab2-system-calls-\u6df1\u5165\u89e3\u6790"},"Lab2: System calls \u6df1\u5165\u89e3\u6790"),(0,r.kt)("h2",{id:"\u5b9e\u9a8c\u6982\u89c8"},"\u5b9e\u9a8c\u6982\u89c8"),(0,r.kt)("p",null,"Syscall \u5b9e\u9a8c\u5c31\u8981\u5bf9\u5185\u6838\u52a8\u5200\u4e86\uff0c\u867d\u7136\u8fd8\u662f\u5f88\u6d45\u5c42\uff0c\u4f46\u5bf9\u7406\u89e3 xv6 \u7684\u7cfb\u7edf\u8c03\u7528\u673a\u5236\u5f88\u6709\u5e2e\u52a9\u3002"),(0,r.kt)("p",null,"\u672c\u5b9e\u9a8c\u6709\u4e24\u4e2a\u4efb\u52a1\uff1a"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u5b9e\u73b0\u7cfb\u7edf\u8c03\u7528\uff1a",(0,r.kt)("inlineCode",{parentName:"p"},"trace"),"\u3002\u5b83\u7684\u529f\u80fd\u5c31\u662f\u8ffd\u8e2a\u7cfb\u7edf\u8c03\u7528\u7684\u6267\u884c\uff0c\u63a5\u53d7\u4e00\u4e2a\u8868\u793a\u5f85\u8ffd\u8e2a\u7cfb\u7edf\u8c03\u7528\u7684\u96c6\u5408\uff0c\u6bcf\u5f53\u5176\u4e2d\u7684\u7cfb\u7edf\u8c03\u7528\u88ab\u67d0\u4e2a\u8fdb\u7a0b\u6267\u884c\u65f6\uff0c\u6253\u5370\u8be5\u8fdb\u7a0b\u7684 PID\uff0c\u88ab\u6267\u884c\u7684\u7cfb\u7edf\u8c03\u7528\u7684\u540d\u5b57\uff0c\u4ee5\u53ca\u5b83\u7684\u8fd4\u56de\u503c\u3002")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u5b9e\u73b0\u7cfb\u7edf\u8c03\u7528\uff1a",(0,r.kt)("inlineCode",{parentName:"p"},"sysinfo"),"\u3002\u5b83\u7684\u4f5c\u7528\u662f\u7ef4\u62a4",(0,r.kt)("inlineCode",{parentName:"p"},"struct sysinfo"),"\uff0c\u8fd9\u4e2a\u7ed3\u6784\u4f53\u4fdd\u5b58\u4e86\u5f53\u524d\u7cfb\u7edf\u7a7a\u95f2\u5185\u5b58\u7684\u5b57\u8282\u6570\u548c\u8fdb\u7a0b\u7684\u6570\u91cf\u3002"))),(0,r.kt)("h2",{id:"system-call-tracing"},"System call tracing"),(0,r.kt)("p",null,"\u5f85\u8ffd\u8e2a\u7cfb\u7edf\u8c03\u7528\u7684\u96c6\u5408\u7528\u4e00\u4e2a",(0,r.kt)("inlineCode",{parentName:"p"},"int"),"\u578b\u7684\u63a9\u7801",(0,r.kt)("inlineCode",{parentName:"p"},"mask"),"\u6765\u8868\u793a\uff0c\u5177\u4f53\u6765\u8bf4\uff0c\u5c31\u662f\u8be5\u63a9\u7801\u7684\u7b2c\u51e0\u4f4d\u4e3a 1\uff0c\u5c31\u8868\u793a\u7b2c\u51e0\u4e2a\u7cfb\u7edf\u8c03\u7528\u8981\u88ab\u8ffd\u8e2a\u3002\u7cfb\u7edf\u8c03\u7528\u53f7\u5982\u4e0b\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"// System call numbers\n##define SYS_fork    1\n##define SYS_exit    2\n##define SYS_wait    3\n##define SYS_pipe    4\n##define SYS_read    5\n##define SYS_kill    6\n##define SYS_exec    7\n##define SYS_fstat   8\n##define SYS_chdir   9\n##define SYS_dup    10\n##define SYS_getpid 11\n##define SYS_sbrk   12\n##define SYS_sleep  13\n##define SYS_uptime 14\n##define SYS_open   15\n##define SYS_write  16\n##define SYS_mknod  17\n##define SYS_unlink 18\n##define SYS_link   19\n##define SYS_mkdir  20\n##define SYS_close  21\n")),(0,r.kt)("p",null,"\u6bd4\u5982\uff0c\u8bbe\u7f6e\u53c2\u6570",(0,r.kt)("inlineCode",{parentName:"p"},"mask=2"),"\uff0c\u5219",(0,r.kt)("inlineCode",{parentName:"p"},"fork"),"\u8981\u88ab\u8ffd\u8e2a\uff1b\u8bbe\u7f6e\u53c2\u6570",(0,r.kt)("inlineCode",{parentName:"p"},"mask=0xffffffff"),"\uff0c\u5219\u6240\u6709\u7cfb\u7edf\u8c03\u7528\u90fd\u8981\u88ab\u8ffd\u8e2a\u3002"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"trace"),"\u7528\u6cd5\u793a\u4f8b\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"trace 32 grep hello README\n")),(0,r.kt)("p",null,"\u8be5\u547d\u4ee4\u8868\u793a\u6700\u7ec8\u8fd0\u884c",(0,r.kt)("inlineCode",{parentName:"p"},"grep"),"\u7a0b\u5e8f\uff0c\u5e76\u4e14\u8bbe\u7f6e",(0,r.kt)("inlineCode",{parentName:"p"},"mask=32"),"\u8ffd\u8e2a\u8fd0\u884c",(0,r.kt)("inlineCode",{parentName:"p"},"grep"),"\u8fc7\u7a0b\u4e2d\u7684\u7cfb\u7edf\u8c03\u7528\u3002",(0,r.kt)("inlineCode",{parentName:"p"},"trace"),"\u7528\u6237\u6001\u7a0b\u5e8f\u7684\u4ee3\u7801\u5982\u4e0b\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"int\nmain(int argc, char *argv[])\n{\n  int i;\n  char *nargv[MAXARG];\n\n  if(argc < 3 || (argv[1][0] < '0' || argv[1][0] > '9')){\n    fprintf(2, \"Usage: %s mask command\\n\", argv[0]);\n    exit(1);\n  }\n\n  if (trace(atoi(argv[1])) < 0) {           //\u6267\u884c\u7cfb\u7edf\u8c03\u7528trace, \u53c2\u6570\u4e3amask\n    fprintf(2, \"%s: trace failed\\n\", argv[0]);\n    exit(1);\n  }\n  \n  for(i = 2; i < argc && i < MAXARG; i++){\n    nargv[i-2] = argv[i];                   //\u8bbe\u7f6e\u539f\u672c\u8981\u6267\u884c\u7684\u547d\u4ee4\u7684\u53c2\u6570\n  }\n  exec(nargv[0], nargv);                    //\u6267\u884c\u539f\u672c\u8981\u6267\u884c\u7684\u547d\u4ee4\n  exit(0);\n}\n")),(0,r.kt)("p",null,"\u63a5\u4e0b\u6765\u6309\u7167\u5b9e\u9a8c\u6307\u5bfc\u7684 Hints \u4e00\u6b65\u6b65\u5f80\u4e0b\u505a\u5c31\u53ef\u4ee5\u4e86\uff0c\u6211\u53ea\u8bb2\u89e3\u90e8\u5206\u91cd\u70b9\u5185\u5bb9"),(0,r.kt)("h6",{id:"\u8fdb\u7a0b\u72b6\u6001\u4fee\u6539"},"\u8fdb\u7a0b\u72b6\u6001\u4fee\u6539"),(0,r.kt)("p",null,"xv6 \u4e3a\u6bcf\u4e2a\u8fdb\u7a0b\u7ef4\u62a4\u4e86\u8868\u793a\u8fdb\u7a0b\u5f53\u524d\u72b6\u6001\u7684\u7ed3\u6784\u4f53",(0,r.kt)("inlineCode",{parentName:"p"},"struct proc"),"\u3002\u5305\u62ec\u8fdb\u7a0b\u7684 PID\uff0c\u7236\u8fdb\u7a0b\u3001\u6587\u4ef6\u63cf\u8ff0\u7b26\u7b49\u4fe1\u606f\uff0c\u4e3a\u4e86\u786e\u5b9a\u5f53\u524d\u8fdb\u7a0b\u8c03\u7528\u7684\u54ea\u4e9b\u7cfb\u7edf\u8c03\u7528\u9700\u8981\u88ab\u8ffd\u8e2a\uff0c\u6211\u5728\u8be5\u7ed3\u6784\u4f53\u8bbe\u7f6e\u4e86",(0,r.kt)("inlineCode",{parentName:"p"},"int mask"),"\u6765\u4fdd\u5b58\u5f85\u8ffd\u8e2a\u7cfb\u7edf\u8c03\u7528\u96c6\u5408"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"// Per-process state\nstruct proc {\n  struct spinlock lock;\n\n  // p->lock must be held when using these:\n  enum procstate state;        // Process state\n  void *chan;                  // If non-zero, sleeping on chan\n  int killed;                  // If non-zero, have been killed\n  int xstate;                  // Exit status to be returned to parent's wait\n  int pid;                     // Process ID\n\n  // wait_lock must be held when using this:\n  struct proc *parent;         // Parent process\n\n  // these are private to the process, so p->lock need not be held.\n  uint64 kstack;               // Virtual address of kernel stack\n  uint64 sz;                   // Size of process memory (bytes)\n  pagetable_t pagetable;       // User page table\n  struct trapframe *trapframe; // data page for trampoline.S\n  struct context context;      // swtch() here to run process\n  struct file *ofile[NOFILE];  // Open files\n  struct inode *cwd;           // Current directory\n  char name[16];               // Process name (debugging)\n    \n  int mask;                    // Trace mask\n};\n")),(0,r.kt)("h6",{id:"\u5185\u6838\u6001trace\u7f16\u5199"},"\u5185\u6838\u6001",(0,r.kt)("inlineCode",{parentName:"h6"},"trace"),"\u7f16\u5199"),(0,r.kt)("p",null,"\u5185\u6838\u6001",(0,r.kt)("inlineCode",{parentName:"p"},"trace"),"\u7f16\u5199\u601d\u8def\u5f88\u7b80\u5355\uff0c\u5206\u4e24\u6b65\u8fdb\u884c\uff1a"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u83b7\u53d6",(0,r.kt)("inlineCode",{parentName:"li"},"trace"),"\u7684\u53c2\u6570\uff0c\u5373\u5f85\u8ffd\u8e2a\u7cfb\u7edf\u8c03\u7528\u96c6\u5408",(0,r.kt)("inlineCode",{parentName:"li"},"mask"),"\uff0c\u5b83\u4fdd\u5b58\u5728\u5f53\u524d\u8fdb\u7a0b\u7684",(0,r.kt)("inlineCode",{parentName:"li"},"a0"),"\u5bc4\u5b58\u5668\u4e2d\uff0c\u4f7f\u7528",(0,r.kt)("inlineCode",{parentName:"li"},"argint"),"\u51fd\u6570\u83b7\u53d6"),(0,r.kt)("li",{parentName:"ul"},"\u4fee\u6539\u5f53\u524d\u8fdb\u7a0b\u72b6\u6001")),(0,r.kt)("p",null,"\u4ee3\u7801\u5982\u4e0b\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"uint64\nsys_trace(void)\n{\n  int mask;\n\n  if(argint(0, &mask) < 0)\n    return -1;\n  myproc()->mask = mask;\n  return 0;\n}\n")),(0,r.kt)("h6",{id:"\u5b50\u8fdb\u7a0b\u7ee7\u627fmask"},"\u5b50\u8fdb\u7a0b\u7ee7\u627f",(0,r.kt)("inlineCode",{parentName:"h6"},"mask")),(0,r.kt)("p",null,"\u5f53\u8981\u8ffd\u8e2a\u7684\u8fdb\u7a0b\u4f7f\u7528",(0,r.kt)("inlineCode",{parentName:"p"},"fork"),"\u521b\u5efa\u5b50\u8fdb\u7a0b\u65f6\uff0c\u6211\u4eec\u663e\u7136\u4e5f\u5e94\u8ffd\u8e2a\u8be5\u5b50\u8fdb\u7a0b\u7684\u7cfb\u7edf\u8c03\u7528\uff0c\u56e0\u6b64\u8981\u5728",(0,r.kt)("inlineCode",{parentName:"p"},"proc.c"),"\u4e2d\u4fee\u6539",(0,r.kt)("inlineCode",{parentName:"p"},"fork"),"\u51fd\u6570\uff0c\u628a\u7236\u8fdb\u7a0b\u7684",(0,r.kt)("inlineCode",{parentName:"p"},"mask"),"\u590d\u5236\u7ed9\u5b50\u8fdb\u7a0b\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"// Create a new process, copying the parent.\n// Sets up child kernel stack to return as if from fork() system call.\nint\nfork(void)\n{\n  int i, pid;\n  struct proc *np;\n  struct proc *p = myproc();\n\n  // Allocate process.\n  if((np = allocproc()) == 0){\n    return -1;\n  }\n\n  // Copy user memory from parent to child.\n  if(uvmcopy(p->pagetable, np->pagetable, p->sz) < 0){\n    freeproc(np);\n    release(&np->lock);\n    return -1;\n  }\n  np->sz = p->sz;\n  // copy trace mask\n  np->mask = p->mask;\n\n  // copy saved user registers.\n  *(np->trapframe) = *(p->trapframe);\n\n  // Cause fork to return 0 in the child.\n  np->trapframe->a0 = 0;\n\n  // increment reference counts on open file descriptors.\n  for(i = 0; i < NOFILE; i++)\n    if(p->ofile[i])\n      np->ofile[i] = filedup(p->ofile[i]);\n  np->cwd = idup(p->cwd);\n\n  safestrcpy(np->name, p->name, sizeof(p->name));\n\n  pid = np->pid;\n\n  release(&np->lock);\n\n  acquire(&wait_lock);\n  np->parent = p;\n  release(&wait_lock);\n\n  acquire(&np->lock);\n  np->state = RUNNABLE;\n  release(&np->lock);\n\n  return pid;\n}\n")),(0,r.kt)("h6",{id:"trace\u8f93\u51fa"},(0,r.kt)("inlineCode",{parentName:"h6"},"trace"),"\u8f93\u51fa"),(0,r.kt)("p",null,"\u5b9e\u9a8c\u8981\u6c42\u6253\u5370\u7cfb\u7edf\u8c03\u7528\u7684\u76f8\u5173\u4fe1\u606f\uff1a\u5f53\u524d\u8fdb\u7a0b PID\u3001\u7cfb\u7edf\u8c03\u7528\u540d\u3001\u7cfb\u7edf\u8c03\u7528\u8fd4\u56de\u503c"),(0,r.kt)("p",null,"\u76f4\u63a5\u5728",(0,r.kt)("inlineCode",{parentName:"p"},"syscall"),"\u51fd\u6570\u4e2d\u4fee\u6539\u5373\u53ef"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"syscall"),"\u539f\u59cb\u4ee3\u7801\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},'void\nsyscall(void)\n{\n  int num;\n  struct proc *p = myproc();\n \n  num = p->trapframe->a7;   //\u83b7\u53d6\u7cfb\u7edf\u8c03\u7528\u53f7\n  if(num > 0 && num < NELEM(syscalls) && syscalls[num]) { //\u5224\u65ad\u6709\u65e0\u5bf9\u5e94\u7684\u7cfb\u7edf\u8c03\u7528\u53f7\n    /* a0: the return of syscalls */\n    p->trapframe->a0 = syscalls[num](); //\u5728\u51fd\u6570\u6307\u9488\u6570\u7ec4\u4e2d\u7d22\u5f15\u5230\u76f8\u5e94\u51fd\u6570\u6267\u884c\uff0c\u628a\u8c03\u7528\u8fd4\u56de\u503c\u4fdd\u5b58\u5230a0\u4e2d\n  } else {\n    printf("%d %s: unknown sys call %d\\n",\n            p->pid, p->name, num);\n    p->trapframe->a0 = -1;\n  }\n}\n')),(0,r.kt)("p",null,"\u8be5\u51fd\u6570\u7684\u903b\u8f91\u5728\u6ce8\u91ca\u4e2d\u5199\u5f97\u5f88\u6e05\u695a\u4e86\u3002\u8981\u60f3\u6253\u5370\u7cfb\u7edf\u8c03\u7528\u7684\u76f8\u5173\u4fe1\u606f\uff0c\u53ea\u9700\u8981\u5728\u5f97\u5230",(0,r.kt)("inlineCode",{parentName:"p"},"num"),"\u4ee5\u540e\uff0c\u5224\u65ad\u5176\u662f\u5426\u5728\u5f53\u524d\u8fdb\u7a0b\u7684",(0,r.kt)("inlineCode",{parentName:"p"},"mask"),"\u4e2d\uff0c\u6839\u636e",(0,r.kt)("inlineCode",{parentName:"p"},"mask"),"\u7684\u63a9\u7801\u7279\u6027\uff0c\u4f7f\u7528\u4e0e\u8fd0\u7b97\u5c31\u80fd\u8f7b\u677e\u5b9e\u73b0\u8fd9\u4e2a\u8fc7\u7a0b\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"(1 << num) & p->mask\n")),(0,r.kt)("p",null,"\u5b8c\u6574\u4ee3\u7801\u5982\u4e0b\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},'void\nsyscall(void)\n{\n  int num;\n  struct proc *p = myproc();\n  char* syscall_name[22] = {"fork", "exit", "wait", "pipe",\n                            "read", "kill", "exec", "fstat", \n                            "chdir", "dup", "getpid", "sbrk", \n                            "sleep", "uptime", "open", "write", \n                            "mknod", "unlink", "link", "mkdir", \n                            "close", "trace"};\n  num = p->trapframe->a7;\n  if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {\n    /* a0: the return of syscalls */\n    p->trapframe->a0 = syscalls[num]();\n    if((1 << num) & p->mask){\n      printf("%d: syscall %s -> %d\\n", p->pid, syscall_name[num-1], p->trapframe->a0);\n    }\n  } else {\n    printf("%d %s: unknown sys call %d\\n",\n            p->pid, p->name, num);\n    p->trapframe->a0 = -1;\n  }\n}\n')),(0,r.kt)("h2",{id:"sysinfo"},"Sysinfo"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"struct sysinfo"),"\u7ed3\u6784\u4f53\u5982\u4e0b\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"struct sysinfo {\n  uint64 freemem;   // amount of free memory (bytes)\n  uint64 nproc;     // number of process\n};\n")),(0,r.kt)("p",null,"\u4e3a\u4e86\u7ef4\u62a4\u8fd9\u4e2a\u7ed3\u6784\u4f53\uff0c\u9700\u8981\u83b7\u5f97\u5f53\u524d\u7cfb\u7edf\u7a7a\u95f2\u5185\u5b58\u7684\u5b57\u8282\u6570\u548c\u8fdb\u7a0b\u7684\u6570\u91cf"),(0,r.kt)("h6",{id:"\u7a7a\u95f2\u5185\u5b58\u9875"},"\u7a7a\u95f2\u5185\u5b58\u9875"),(0,r.kt)("p",null,"\u5185\u6838\u4e2d\u7684",(0,r.kt)("inlineCode",{parentName:"p"},"kalloc.c"),"\u7ba1\u7406\u7269\u7406\u5185\u5b58\uff0c\u5b83\u4f7f\u7528\u94fe\u8868\u7ef4\u62a4\u7a7a\u95f2\u9875\uff0c\u94fe\u8868\u7ed3\u70b9\u5b9a\u4e49\u5982\u4e0b\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"struct run {\n  struct run *next;\n};\n\nstruct {\n  struct spinlock lock;\n  struct run *freelist;\n} kmem;\n")),(0,r.kt)("p",null,"\u5c06\u7a7a\u95f2\u9875\u6dfb\u52a0\u5165\u94fe\u8868\u7684\u51fd\u6570\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},'void\nkfree(void *pa)\n{\n  struct run *r;\n\n  if(((uint64)pa % PGSIZE) != 0 || (char*)pa < end || (uint64)pa >= PHYSTOP)\n    panic("kfree");\n\n  // Fill with junk to catch dangling refs.\n  memset(pa, 1, PGSIZE);\n\n  r = (struct run*)pa;      //\u7a7a\u95f2\u9875\u5934\u90e88\u4e2a\u5b57\u8282\n\n  acquire(&kmem.lock);\n  r->next = kmem.freelist;\n  kmem.freelist = r;\n  release(&kmem.lock);\n}\n')),(0,r.kt)("p",null,"\u901a\u8fc7\u8be5\u51fd\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u5b66\u5230\u7a7a\u95f2\u9875\u94fe\u8868\u7684\u5de5\u4f5c\u539f\u7406\uff1a"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u6bcf\u4e2a\u7a7a\u95f2\u9875\u7684\u5927\u5c0f\u8bbe\u7f6e\u4e3a",(0,r.kt)("inlineCode",{parentName:"li"},"PGSIZE")),(0,r.kt)("li",{parentName:"ul"},"\u5c06\u7a7a\u95f2\u9875\u7684\u5934\u90e8 8 \u4e2a\u5b57\u8282\u4f5c\u4e3a\u6307\u9488\u6307\u5411\u4e0b\u4e00\u4e2a\u7a7a\u95f2\u9875")),(0,r.kt)("p",null,"\u56e0\u6b64\uff0c\u53ea\u9700\u8981\u904d\u5386",(0,r.kt)("inlineCode",{parentName:"p"},"freelist"),"\uff0c\u5f97\u5230\u603b\u7a7a\u95f2\u9875\u6570\u91cf\uff0c\u518d\u7528\u7a7a\u95f2\u9875\u6570\u91cf\u4e58\u6bcf\u4e2a\u7a7a\u95f2\u9875\u7684\u5927\u5c0f\u5373\u53ef\u5f97\u5230\u7a7a\u95f2\u5185\u5b58\u7684\u5927\u5c0f\uff0c\u4ee3\u7801\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"uint64\nfreemem()\n{\n  struct run *r;\n  uint64 mem = 0;\n  r = kmem.freelist;\n  while(r){\n    r = r->next;\n    mem++;\n  }\n  return mem*PGSIZE;\n}\n")),(0,r.kt)("h6",{id:"\u8fdb\u7a0b\u72b6\u6001"},"\u8fdb\u7a0b\u72b6\u6001"),(0,r.kt)("p",null,"\u524d\u9762\u8bf4\u5230\u4e86\u8868\u660e\u6bcf\u4e2a\u8fdb\u7a0b\u72b6\u6001\u7684\u7ed3\u6784\u4f53",(0,r.kt)("inlineCode",{parentName:"p"},"struct proc"),"\uff0c\u8fd9\u4e2a\u7ed3\u6784\u4f53\u4e2d\u6709\u4e00\u4e2a\u5b57\u6bb5"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"enum procstate state;        // Process state\n")),(0,r.kt)("p",null,"\u5b83\u7528\u6765\u8868\u793a\u5f53\u524d\u8fdb\u7a0b\u7684\u8fd0\u884c\u72b6\u6001\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"enum procstate { UNUSED, USED, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };\n")),(0,r.kt)("p",null,"\u6211\u4eec\u9700\u8981\u5f97\u5230\u8fdb\u7a0b\u72b6\u6001\u4e3a",(0,r.kt)("inlineCode",{parentName:"p"},"UNUSED"),"\u7684\u8fdb\u7a0b\u6570\u91cf"),(0,r.kt)("p",null,"\u5728",(0,r.kt)("inlineCode",{parentName:"p"},"proc.c"),"\u4e2d\uff0c\u6709\u4e00\u4e2a\u7ed3\u6784\u4f53\u6570\u7ec4\u6765\u7ef4\u62a4\u5f53\u524d\u6240\u6709\u8fdb\u7a0b\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"struct proc proc[NPROC]; //NPROC=64\uff0c\u6700\u5927\u8fdb\u7a0b\u6570\u91cf\n")),(0,r.kt)("p",null,"\u56e0\u6b64\u53ea\u9700\u904d\u5386\u8fd9\u4e2a\u7ed3\u6784\u4f53\u6570\u7ec4\u5e76\u8ba1\u6570\u5373\u53ef\uff0c\u4ee3\u7801\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"// collect the number of process\nuint64\nprocnum(void)\n{\n  int num = 0;\n  for(int i = 0; i < NPROC; i++){\n    if(proc[i].state != UNUSED){\n      num++;\n    }\n  }\n  return num;\n}\n")),(0,r.kt)("h6",{id:"\u8bbe\u7f6esysinfo"},"\u8bbe\u7f6e",(0,r.kt)("inlineCode",{parentName:"h6"},"sysinfo")),(0,r.kt)("p",null,"\u8c03\u7528\u4e0a\u8ff0\u4e24\u4e2a\u51fd\u6570\u8bbe\u7f6e\u7ed3\u6784\u4f53\uff0c\u5e76\u5c06\u5176\u590d\u5236\u5230\u7528\u6237\u7a7a\u95f4\uff0c\u5728",(0,r.kt)("inlineCode",{parentName:"p"},"sysproc.c"),"\u4e2d\u6dfb\u52a0\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"uint64\nsys_sysinfo(void)\n{\n  uint64 addr;\n  if(argaddr(0, &addr) < 0)\n    return -1;\n  \n  struct sysinfo info;\n  info.freemem = freemem();     //\u7a7a\u95f2\u5185\u5b58\n  info.nproc = procnum();       //UNUSED\u7ebf\u7a0b\u6570\n\n  struct proc *p = myproc();  \n  if(copyout(p->pagetable, addr, (char *)&info, sizeof(info)) < 0)\n      return -1;\n  return 0;\n}\n")),(0,r.kt)("h2",{id:"\u6d4b\u8bd5"},"\u6d4b\u8bd5"),(0,r.kt)("p",null,"\u6d4b\u8bd5\u622a\u56fe\uff1a"),(0,r.kt)("p",null,(0,r.kt)("img",{src:t(32821).Z,width:"994",height:"560"})),(0,r.kt)("p",null,"\u6ee1\u5206\u901a\u8fc7\uff01"),(0,r.kt)("h2",{id:"\u7cfb\u7edf\u8c03\u7528\u8fc7\u7a0b"},"\u7cfb\u7edf\u8c03\u7528\u8fc7\u7a0b"),(0,r.kt)("p",null,"\u505a\u5230\u8fd9\u91cc\uff0c\u672c\u5b9e\u9a8c\u5c31\u7ed3\u675f\u4e86\uff0c\u4f46\u6211\u4f9d\u65e7\u610f\u72b9\u672a\u5c3d\uff0c\u4ece Shell \u521b\u5efa\u5b50\u8fdb\u7a0b\u8fd0\u884c",(0,r.kt)("inlineCode",{parentName:"p"},"trace"),"\u5f00\u59cb\uff0c\u5230\u6267\u884c\u7528\u6237\u6001\u4e2d\u7684",(0,r.kt)("inlineCode",{parentName:"p"},"trace"),"\u7a0b\u5e8f\uff0c\u518d\u5230\u6267\u884c\u5185\u6838\u6001\u4e2d\u7684",(0,r.kt)("inlineCode",{parentName:"p"},"trace"),"\u7cfb\u7edf\u8c03\u7528\uff0c\u8fd9\u6574\u4e2a\u8fc7\u7a0b\u7a76\u7adf\u662f\u600e\u4e48\u6837\u7684\u5462\uff1f"),(0,r.kt)("p",null,"\u63a5\u4e0b\u6765\u6211\u5c06\u8be6\u7ec6\u9610\u8ff0"),(0,r.kt)("h6",{id:"ecall\u8df3\u8f6c"},(0,r.kt)("inlineCode",{parentName:"h6"},"ecall"),"\u8df3\u8f6c"),(0,r.kt)("p",null,"\u7528\u6237\u6001\u901a\u8fc7",(0,r.kt)("inlineCode",{parentName:"p"},"ecall"),"\u6307\u4ee4\u8fdb\u5165\u5185\u6838\u6001\uff0c",(0,r.kt)("inlineCode",{parentName:"p"},"ecall"),"\u7684\u8c03\u7528\u5728",(0,r.kt)("inlineCode",{parentName:"p"},"usys.S"),"\u4e2d\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},'## generated by usys.pl - do not edit\n##include "kernel/syscall.h"\n.global fork\nfork:\n li a7, SYS_fork\n ecall\n ret\n.global exit\nexit:\n li a7, SYS_exit\n ecall\n ret\n.global wait\n\n\n...     \n     \n.global update\nuptime:\n li a7, SYS_uptime\n ecall\n ret\n.global trace\ntrace:\n li a7, SYS_trace\n ecall\n ret\n.global sysinfo\nsysinfo:\n li a7, SYS_sysinfo\n ecall\n ret\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u7528\u6237\u6001\u7684",(0,r.kt)("inlineCode",{parentName:"li"},"trace"),"\u6267\u884c\u7cfb\u7edf\u8c03\u7528\u65f6\uff0c\u4f1a\u628a\u53c2\u6570\u4fdd\u5b58\u5728",(0,r.kt)("inlineCode",{parentName:"li"},"a0"),"\u5bc4\u5b58\u5668\u4e2d"),(0,r.kt)("li",{parentName:"ul"},"\u968f\u540e\u5728",(0,r.kt)("inlineCode",{parentName:"li"},"usys.S"),"\u4e2d\u5c06\u76f8\u5e94\u7684\u7cfb\u7edf\u8c03\u7528\u53f7\u4fdd\u5b58\u5230",(0,r.kt)("inlineCode",{parentName:"li"},"a7"),"\u5bc4\u5b58\u5668\u4e2d"),(0,r.kt)("li",{parentName:"ul"},"\u6700\u540e\uff0c\u6267\u884c",(0,r.kt)("inlineCode",{parentName:"li"},"ecall"),"\u8fdb\u5165\u5185\u6838\u6001\u7684",(0,r.kt)("inlineCode",{parentName:"li"},"trampoline.S"))),(0,r.kt)("p",null,"\u7528\u6237\u6001\u7a0b\u5e8f\u901a\u8fc7\u6267\u884c\u7cfb\u7edf\u8c03\u7528\u9677\u5165\u5185\u6838\u6001\u79f0\u4e3a\u7528\u6237\u6001\u9677\u9631"),(0,r.kt)("p",null,"\u9677\u9631\u5bf9\u8fdb\u7a0b\u662f\u900f\u660e\u7684\uff1a\u5f53\u6267\u884c\u5b8c\u5904\u7406\u7a0b\u5e8f\u540e\uff0c\u88ab\u6253\u65ad\u7684\u8fdb\u7a0b\u8981\u80fd\u591f\u6062\u590d\u4e4b\u524d\u7684\u72b6\u6001\u3002\u8fd9\u5c31\u8981\u6c42\u8fdb\u7a0b\u5728\u9677\u5165\u5185\u6838\u6001\u65f6\uff0c\u5185\u6838\u4fdd\u5b58\u7528\u6237\u5bc4\u5b58\u5668\u7684\u4fe1\u606f\uff0c\u5e76\u5728\u6267\u884c\u5b8c\u5904\u7406\u7a0b\u5e8f\u540e\u518d\u5c06\u5b83\u4eec\u8fdb\u884c\u6062\u590d"),(0,r.kt)("p",null,"\u800c",(0,r.kt)("inlineCode",{parentName:"p"},"trampoline.S"),"\u5c31\u7528\u6765\u5b9e\u73b0\u8fd9\u4e2a\u4efb\u52a1\uff1a"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"uservec"),"\u4fdd\u5b58\u7528\u6237\u5bc4\u5b58\u5668\u3001",(0,r.kt)("inlineCode",{parentName:"p"},"userret"),"\u6062\u590d\u7528\u6237\u5bc4\u5b58\u5668\u3002\u6d41\u7a0b\u5982\u4e0b\uff1a"),(0,r.kt)("p",null,(0,r.kt)("img",{src:t(56276).Z,width:"1309",height:"918"})),(0,r.kt)("h6",{id:"uservec\u4fdd\u5b58\u7528\u6237\u5bc4\u5b58\u5668"},(0,r.kt)("inlineCode",{parentName:"h6"},"uservec"),"\u4fdd\u5b58\u7528\u6237\u5bc4\u5b58\u5668"),(0,r.kt)("p",null,"\u5728\u8fdb\u5165",(0,r.kt)("inlineCode",{parentName:"p"},"uservec"),"\u51fd\u6570\u65f6\uff0c\u6240\u6709\u7684 32 \u4e2a\u5bc4\u5b58\u5668\u90fd\u662f\u88ab\u4e2d\u65ad\u4ee3\u7801\u6240\u4eab\u6709\u7684\uff0c\u800c",(0,r.kt)("inlineCode",{parentName:"p"},"uservec"),"\u9700\u8981\u4f7f\u7528\u5bc4\u5b58\u5668\u6765\u6267\u884c\u6307\u4ee4\uff0c\u56e0\u6b64\uff0cRISC-V \u63d0\u4f9b\u4e86",(0,r.kt)("inlineCode",{parentName:"p"},"sscratch"),"\u5bc4\u5b58\u5668\uff0c\u901a\u8fc7",(0,r.kt)("inlineCode",{parentName:"p"},"csrrw a0, sscratch, a0"),"\u6307\u4ee4\uff0c\u4fdd\u5b58",(0,r.kt)("inlineCode",{parentName:"p"},"a0"),"\uff0c\u4e4b\u540e\u5c31\u53ef\u4ee5\u4f7f\u7528",(0,r.kt)("inlineCode",{parentName:"p"},"a0"),"\u5bc4\u5b58\u5668\u4e86\u3002"),(0,r.kt)("p",null,"\u7136\u540e\uff0c\u51fd\u6570\u4fdd\u5b58\u6240\u6709\u7528\u6237\u5bc4\u5b58\u5668\u5230",(0,r.kt)("inlineCode",{parentName:"p"},"trapframe"),"\u7ed3\u6784\u4f53\u4e2d\uff0c\u8be5\u7ed3\u6784\u4f53\u7684\u5730\u5740\u5728\u8fdb\u5165\u7528\u6237\u6a21\u5f0f\u4e4b\u524d\uff0c\u88ab\u4fdd\u5b58\u5728",(0,r.kt)("inlineCode",{parentName:"p"},"sscratch"),"\u5bc4\u5b58\u5668\u4e2d\uff0c\u56e0\u6b64\u7ecf\u8fc7\u4e4b\u524d\u7684",(0,r.kt)("inlineCode",{parentName:"p"},"csrrw"),"\u64cd\u4f5c\u540e\uff0c\u5c31\u88ab\u4fdd\u5b58\u5728",(0,r.kt)("inlineCode",{parentName:"p"},"a0"),"\u4e2d\uff0c\u901a\u8fc7",(0,r.kt)("inlineCode",{parentName:"p"},"a0"),"\u5bfb\u5740\u5c31\u80fd\u5b9e\u73b0\u4fdd\u5b58\u7528\u6237\u5bc4\u5b58\u5668\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"## save the user registers in TRAPFRAME\n        sd ra, 40(a0)\n        sd sp, 48(a0)\n        sd gp, 56(a0)\n        sd tp, 64(a0)\n        sd t0, 72(a0)\n        sd t1, 80(a0)\n        \n            ...\n            \n        sd t3, 256(a0)\n        sd t4, 264(a0)\n        sd t5, 272(a0)\n        sd t6, 280(a0)\n")),(0,r.kt)("p",null,"\u5f53\u521b\u5efa\u8fdb\u7a0b\u65f6\uff0c\u5185\u6838\u4f1a\u7533\u8bf7\u4e00\u4e2a\u9875\u9762\u4fdd\u5b58",(0,r.kt)("inlineCode",{parentName:"p"},"trapframe"),"\uff0c\u8be5\u9875\u9762\u5c31\u4f4d\u4e8e",(0,r.kt)("inlineCode",{parentName:"p"},"TRAMPOLINE"),"\u4e0b\u65b9\uff0c\u8fdb\u7a0b\u7684",(0,r.kt)("inlineCode",{parentName:"p"},"p->trapframe"),"\u4e5f\u6307\u5411\u8be5\u9875\u9762\u3002"),(0,r.kt)("p",null,"\u6700\u540e\uff0c\u51fd\u6570\u4ece",(0,r.kt)("inlineCode",{parentName:"p"},"trapframe"),"\u4e2d\u53d6\u51fa\u5185\u6838\u6808\u5730\u5740\u3001",(0,r.kt)("inlineCode",{parentName:"p"},"hartid"),"\u3001",(0,r.kt)("inlineCode",{parentName:"p"},"usertrap"),"\u7684\u5730\u5740\u3001\u5185\u6838\u9875\u8868\u5730\u5740\uff0c\u5207\u6362\u9875\u8868\uff0c\u8df3\u8f6c\u5230",(0,r.kt)("inlineCode",{parentName:"p"},"usertrap"),"\u51fd\u6570\u3002"),(0,r.kt)("h6",{id:"\u9677\u9631\u5904\u7406"},"\u9677\u9631\u5904\u7406"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"uservec"),"\u4fdd\u5b58\u7528\u6237\u5bc4\u5b58\u5668\u540e\uff0c\u4f1a\u8fdb\u5165",(0,r.kt)("inlineCode",{parentName:"p"},"trap.c"),"\u9677\u9631\u5904\u7406\u7a0b\u5e8f\u3002\u5b83\u9996\u5148\u8c03\u7528",(0,r.kt)("inlineCode",{parentName:"p"},"usertrap"),"\u51fd\u6570\u5c06",(0,r.kt)("inlineCode",{parentName:"p"},"stvec"),"\u8bbe\u7f6e\u4e3a",(0,r.kt)("inlineCode",{parentName:"p"},"kernelvec"),"\u7684\u5730\u5740\uff0c\u7136\u540e\u5224\u65ad\u9677\u9631\u7c7b\u578b\uff0c\u5982\u679c\u662f\u7cfb\u7edf\u8c03\u7528\uff0c\u5c31\u5c06",(0,r.kt)("inlineCode",{parentName:"p"},"pc"),"\u6307\u5411",(0,r.kt)("inlineCode",{parentName:"p"},"ecall"),"\u7684\u4e0b\u4e00\u6761\u6307\u4ee4\uff0c\u968f\u540e\u4ea4\u7ed9",(0,r.kt)("inlineCode",{parentName:"p"},"syscall"),"\u51fd\u6570\u5904\u7406"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},'//\n// handle an interrupt, exception, or system call from user space.\n// called from trampoline.S\n//\nvoid\nusertrap(void)\n{\n  int which_dev = 0;\n\n  if((r_sstatus() & SSTATUS_SPP) != 0)\n    panic("usertrap: not from user mode");\n\n  // send interrupts and exceptions to kerneltrap(),\n  // since we\'re now in the kernel.\n  w_stvec((uint64)kernelvec);\n\n  struct proc *p = myproc();\n  \n  // save user program counter.\n  p->trapframe->epc = r_sepc();\n  \n  if(r_scause() == 8){\n    // system call\n\n    if(p->killed)\n      exit(-1);\n\n    // sepc points to the ecall instruction,\n    // but we want to return to the next instruction.\n    p->trapframe->epc += 4;\n\n    // an interrupt will change sstatus &c registers,\n    // so don\'t enable until done with those registers.\n    intr_on();\n\n    syscall();\n  } else if((which_dev = devintr()) != 0){\n    // ok\n  } else {\n    printf("usertrap(): unexpected scause %p pid=%d\\n", r_scause(), p->pid);\n    printf("            sepc=%p stval=%p\\n", r_sepc(), r_stval());\n    p->killed = 1;\n  }\n\n  if(p->killed)\n    exit(-1);\n\n  // give up the CPU if this is a timer interrupt.\n  if(which_dev == 2)\n    yield();\n\n  usertrapret();\n}\n')),(0,r.kt)("p",null,"\u63a5\u4e0b\u6765\u7684\u8fc7\u7a0b\u5c31\u5f88\u719f\u6089\u4e86\uff0c",(0,r.kt)("inlineCode",{parentName:"p"},"syscall.c"),"\u4e2d\u6709\u4e00\u4e2a\u7cfb\u7edf\u8c03\u7528\u7684\u51fd\u6570\u6307\u9488\u6570\u7ec4\uff0c\u5b83\u901a\u8fc7\u7cfb\u7edf\u8c03\u7528\u53f7\u6267\u884c\u76f8\u5e94\u7684\u7cfb\u7edf\u8c03\u7528\u3002"),(0,r.kt)("p",null,"\u6267\u884c\u5b8c\u6bd5\u540e\u8fd4\u56de\u9677\u9631\u5904\u7406\u7a0b\u5e8f\uff0c\u63a5\u4e0b\u6765\u8c03\u7528",(0,r.kt)("inlineCode",{parentName:"p"},"usertrapret"),"\u51fd\u6570"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"usertrapret"),"\u51fd\u6570\u5c06",(0,r.kt)("inlineCode",{parentName:"p"},"stvec"),"\u8bbe\u7f6e\u4e3a",(0,r.kt)("inlineCode",{parentName:"p"},"uservec"),"\u7684\u5730\u5740\uff0c\u4e4b\u540e\u8bbe\u7f6e",(0,r.kt)("inlineCode",{parentName:"p"},"trapframe"),"\uff0c\u7136\u540e\u6062\u590d",(0,r.kt)("inlineCode",{parentName:"p"},"sepc"),"\u5bc4\u5b58\u5668"),(0,r.kt)("p",null,"\u6700\u540e\uff0c\u8c03\u7528",(0,r.kt)("inlineCode",{parentName:"p"},"userret"),"\u51fd\u6570"),(0,r.kt)("h6",{id:"userret\u6062\u590d\u7528\u6237\u5bc4\u5b58\u5668"},(0,r.kt)("inlineCode",{parentName:"h6"},"userret"),"\u6062\u590d\u7528\u6237\u5bc4\u5b58\u5668"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"userret"),"\u51fd\u6570\u8fdb\u884c\u4e0e",(0,r.kt)("inlineCode",{parentName:"p"},"uservec"),"\u76f8\u53cd\u7684\u6b65\u9aa4\uff0c\u5c06\u9875\u8868\u548c\u5bc4\u5b58\u5668\u8fdb\u884c\u6062\u590d\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"## restore all but a0 from TRAPFRAME\n        ld ra, 40(a0)\n        ld sp, 48(a0)\n        ld gp, 56(a0)\n        ld tp, 64(a0)\n        ld t0, 72(a0)\n        ld t1, 80(a0)\n        \n            ...\n        \n        \n        ld t3, 256(a0)\n        ld t4, 264(a0)\n        ld t5, 272(a0)\n        ld t6, 280(a0)\n")),(0,r.kt)("p",null,"\u6700\u540e\uff0c\u901a\u8fc7",(0,r.kt)("inlineCode",{parentName:"p"},"sret"),"\u6307\u4ee4\u56de\u5230\u7528\u6237\u6001\uff0c\u81f3\u6b64\uff0c",(0,r.kt)("inlineCode",{parentName:"p"},"trace"),"\u7cfb\u7edf\u8c03\u7528\u5c31\u6267\u884c\u7ed3\u675f\u4e86"),(0,r.kt)("h6",{id:"\u6d41\u7a0b\u56fe"},"\u6d41\u7a0b\u56fe"),(0,r.kt)("p",null,"\u5168\u8fc7\u7a0b\u8c03\u7528\u6d41\u7a0b\u56fe\u5982\u4e0b\uff1a"),(0,r.kt)("p",null,(0,r.kt)("img",{src:t(68315).Z,width:"770",height:"1398"})),(0,r.kt)("h2",{id:"\u603b\u7ed3"},"\u603b\u7ed3"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u64cd\u4f5c\u7cfb\u7edf\u4e0d\u6127\u662f\u7a0b\u5e8f\u5458\u7684\u4e09\u5927\u6d6a\u6f2b\u4e4b\u4e00\uff0c\u7b80\u5355\u7684\u7cfb\u7edf\u8c03\u7528\u9677\u9631\u5904\u7406\u8fc7\u7a0b\u5c31\u5982\u6b64\u4f18\u7f8e\uff0c\u7b80\u76f4\u8ba9\u4eba\u7740\u8ff7\uff01"),(0,r.kt)("li",{parentName:"ul"},"\u672c\u5b9e\u9a8c\u8017\u65f6 2 \u5929\uff0c\u7ea6 6 \u5c0f\u65f6")))}u.isMDXComponent=!0},32821:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/image-20220518160003668-74bf5d2ffa3d0aeabf6be7142ba6f8c7.png"},56276:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/image-20220518181202268-f6e59ce9ad5c13eabb6ff1f7163c7d8e.png"},68315:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/relation-16528682556811-7d5907ff404cd7049413216f1fb9203d.svg"}}]);